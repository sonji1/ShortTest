cscope 16 C:\sonji\Bioptro\ACE400_ShortTest\ACE400_ShortTest"               0000044350
	@ACE400MainDlg.h

4 #i‡!
deföed
(
AFX_ACE400_Sh‹tTe°DLG_H__A60D6315_99C4_46C0_A323_42C7B357B0A2__INCLUDED_
)

5 
	#AFX_ACE400_Sh‹tTe°DLG_H__A60D6315_99C4_46C0_A323_42C7B357B0A2__INCLUDED_


	)

7 
	~"Sh‹tTe°Dülog.h
"

8 
	~"C⁄figDülog.h
"

10 #i‡
_MSC_VER
 > 1000

11 #¥agm®
⁄˚


17 ˛as†
	cCACE400MaöDlg
 : 
public
 
CDülog


20 
public
:

21 
CSh‹tTe°Dülog
 
m_Sh‹tTe°Dlg
;

22 
CC⁄figDülog
 
	mm_C⁄figDlg
;

24 
CACE400MaöDlg
(
CWnd
* 
pP¨ít
 = 
NULL
);

28 íum { 
	mIDD
 = 
IDD_MAIN_DIALOG
 };

34 
	gpublic
:

35 
vútuÆ
 
BOOL
 
PªTøn¶©eMesßge
(
MSG
* 
pMsg
);

36 
	g¥Ÿe˘ed
:

37 
vútuÆ
 
DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
);

41 
	g¥Ÿe˘ed
:

42 
HICON
 
m_hIc⁄
;

46 
vútuÆ
 
BOOL
 
OnInôDülog
();

47 
afx_msg
 
OnSysComm™d
(
UINT
 
nID
, 
LPARAM
 
lP¨am
);

48 
afx_msg
 
OnPaöt
();

49 
afx_msg
 
HCURSOR
 
OnQuîyDøgIc⁄
();

50 
afx_msg
 
OnBuâ⁄Sh‹tTe°
();

51 
afx_msg
 
OnBuâ⁄C⁄fig
();

53 
DECLARE_MESSAGE_MAP
()

	@ACE400_ShortTest.h

4 #i‡!
deföed
(
AFX_ACE400_Sh‹tTe°_H__CB3F7139_0C6D_46B6_A240_563945A8EA0D__INCLUDED_
)

5 
	#AFX_ACE400_Sh‹tTe°_H__CB3F7139_0C6D_46B6_A240_563945A8EA0D__INCLUDED_


	)

7 #i‡
_MSC_VER
 > 1000

8 #¥agm®
⁄˚


11 #i‚de‡
__AFXWIN_H__


12 #îr‹ 
ö˛ude
 '°dafx.h' 
bef‹e
 
ö˛udög
 
this
 
fûe
 
PCH


15 
	~"ªsour˚.h
"

22 ˛as†
	cCACE400_Sh‹tTe°Aµ
 : 
public
 
CWöAµ


24 
public
:

25 
CACE400_Sh‹tTe°Aµ
();

30 
	mpublic
:

31 
vútuÆ
 
BOOL
 
InôIn°™˚
();

40 
DECLARE_MESSAGE_MAP
()

	@ConfigDialog.h

1 #i‡!
deföed
(
AFX_CONFIGDIALOG_H__5E887A2B_8CCA_4DDD_B20A_14333A1EA84C__INCLUDED_
)

2 
	#AFX_CONFIGDIALOG_H__5E887A2B_8CCA_4DDD_B20A_14333A1EA84C__INCLUDED_


	)

4 #i‡
_MSC_VER
 > 1000

5 #¥agm®
⁄˚


13 ˛as†
	cCC⁄figDülog
 : 
public
 
CDülog


16 
public
:

17 
CC⁄figDülog
(
CWnd
* 
pP¨ít
 = 
NULL
);

21 íum { 
	mIDD
 = 
IDD_CONFIG_DIALOG
 };

29 
	g¥Ÿe˘ed
:

30 
vútuÆ
 
DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
);

34 
	g¥Ÿe˘ed
:

40 
DECLARE_MESSAGE_MAP
()

	@Error.h

5 #i‡!
deföed
(
AFX_ERROR_H__8D3D34FA_3024_4D5F_81B6_D01841D85268__INCLUDED_
)

6 
	#AFX_ERROR_H__8D3D34FA_3024_4D5F_81B6_D01841D85268__INCLUDED_


	)

8 #i‡
_MSC_VER
 > 1000

9 #¥agm®
⁄˚


14 
	eEºID
 {

16 
	mNO_ERR
=0,

17 
	mTEST_ERR
=1,

18 
	mTEST_TRACE
=2,

21 
	mESTOP
=10,

25 
	mSENSOR
=100,

26 
	mSS_DT5V_LOW
,

27 
	mSS_DT12V_LOW
,

28 
	mSS_DT24V_LOW
,

29 
	mSS_DTHV_LOW
,

30 
	mSS_DT5VB_A_LOW
,

31 
	mSS_DT5VC_A_LOW
,

32 
	mSS_DT5VB_B_LOW
,

33 
	mSS_DT5VC_B_LOW
,

34 
	mSS_DT5VB_C_LOW
,

35 
	mSS_DT5VC_C_LOW
,

36 
	mSS_DT5VB_D_LOW
,

37 
	mSS_DT5VC_D_LOW
,

38 
	mSS_DT5VB_E_LOW
,

39 
	mSS_DT5VC_E_LOW
,

40 
	mSS_DT5VB_F_LOW
,

41 
	mSS_DT5VC_F_LOW
,

42 
	mSS_DT5VB_G_LOW
,

43 
	mSS_DT5VC_G_LOW
,

44 
	mSS_DT5VB_H_LOW
,

45 
	mSS_DT5VC_H_LOW
,

48 
	mSGNI
=400,

51 
	mFLAG
=500,

52 
	mFLAG_SOURCE_OR_SINK_CANNOT_ON
,

53 
	mFLAG_SOURCE_CANNOT_OFF
,

54 
	mFLAG_SINK_CANNOT_OFF
,

55 
	mFLAG_SOURCE_LEAK
,

56 
	mFLAG_SINK_LEAK
,

57 
	mFLAG_ODD_SOURCE_LEAK
,

58 
	mFLAG_EVEN_SOURCE_LEAK
,

60 
	mFLAG_FILE_NOT_FOUND
,

61 
	mFLAG_FILE_CANNOT_OPEN
,

62 
	mFLAG_FILE_UNPROPER_PARAMETER
,

63 
	mFLAG_FILE_CHECK_SUM
,

68 
	mINVALID_RETURN
=600,

71 
	mINVALID_INPUT
=601,

74 
	mUSER_ERR
=650,

77 
	mRANGE_OVER
=700,

78 
	mOL_REF_CURRENT_IS_OVER_INPUT_VOLT_N_RGST
,

79 
	mOL_I_RANGE_OVER
,

80 
	mOL_I_RANGE_UNDER
,

81 
	mCAL_CHECK_TEST_CONDITION
,

82 
	mCAL_CHECK_HW
,

84 
	mSW_LOGIC_ERR
 = 750,

85 
	mSW_NO_INIT_VAR
,

86 
	mMAN_ERR_TEST_CONDEITION
,

89 
	mOVERTIME
=800,

90 
	mOT_SETNCHK
,

91 
	mOT_VB_OUTCHECK_ERR
,

94 
	mDEVICE
=1000,

96 
	mMOTION
=
DEVICE
+100,

97 
	mDIO_INIT_ERR
,

98 
	mDIO_EXIT_ERR
,

99 
	mINVALID_RETURN_DIOINPBIT
,

100 
	mINVALID_RETURN_DIOOUTBIT
,

101 
	mINVALID_RETURN_DIOINPBYTE
,

102 
	mINVALID_RETURN_DIOOUTBYTE
,

103 
	mINVALID_RETURN_DIOINP_MBIT
,

104 
	mINVALID_RETURN_DIOOUT_MBIT
,

109 
	mîr‹_no
;

110 c⁄° * 
	mtôÀ
;

111 c⁄° * 
	m°©e
;

112 c⁄° * 
	msﬁ
;

113 } 
	tsEºMsg
;

115 
sEºMsg
 
	gEºMsgTabÀ
[] =

117 { 
NO_ERR
, "Normal", "", "" },

118 { 
TEST_ERR
, "Test", "", "" },

119 { 
TEST_TRACE
, "Test Trace", "", "" },

121 { 
ESTOP
, "E-Stop", "", "" },

123 { 
SENSOR
, "Sensor", "", "" },

124 { 
SS_DT5V_LOW
 , "5V ¿¸ø¯ ¿ÃªÛ", "", "" },

125 { 
SS_DT12V_LOW
, "12V ¿¸ø¯ ¿ÃªÛ", "", "" },

126 { 
SS_DT24V_LOW
, "24V ¿¸ø¯ ¿ÃªÛ", "", "" },

127 { 
SS_DTHV_LOW
 , "HV ¿¸ø¯ ¿ÃªÛ", "", "" },

129 { 
SS_DT5VB_A_LOW
, "BOX A 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

130 { 
SS_DT5VC_A_LOW
, "BOX A 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

131 { 
SS_DT5VB_B_LOW
, "BOX B 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

132 { 
SS_DT5VC_B_LOW
, "BOX B 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

133 { 
SS_DT5VB_C_LOW
, "BOX C 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

134 { 
SS_DT5VC_C_LOW
, "BOX C 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

135 { 
SS_DT5VB_D_LOW
, "BOX D 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

136 { 
SS_DT5VC_D_LOW
, "BOX D 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

137 { 
SS_DT5VB_E_LOW
, "BOX E 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

138 { 
SS_DT5VC_E_LOW
, "BOX E 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

139 { 
SS_DT5VB_F_LOW
, "BOX F 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

140 { 
SS_DT5VC_F_LOW
, "BOX F 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

141 { 
SS_DT5VB_G_LOW
, "BOX G 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

142 { 
SS_DT5VC_G_LOW
, "BOX G 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

143 { 
SS_DT5VB_H_LOW
, "BOX H 5VB ¿¸ø¯ ¿ÃªÛ", "" , "" },

144 { 
SS_DT5VC_H_LOW
, "BOX H 5VC ¿¸ø¯ ¿ÃªÛ", "" , "" },

146 { 
SGNI
, "Signal", "", "" },

148 { 
FLAG
, "Flag", "", "" },

150 { 
FLAG_SOURCE_OR_SINK_CANNOT_ON
, "Source/Sink ON ¿ÃªÛ", "", "" },

151 { 
FLAG_SOURCE_CANNOT_OFF
, "Source OFF ¿ÃªÛ", "", "" },

152 { 
FLAG_SINK_CANNOT_OFF
, "Sink OFF ¿ÃªÛ", "", "" },

153 { 
FLAG_SOURCE_LEAK
, "Source Leak ¿ÃªÛ", "", "" },

154 { 
FLAG_SINK_LEAK
, "Sink Leak ¿ÃªÛ", "", "" },

155 { 
FLAG_ODD_SOURCE_LEAK
, "Odd Source Leak ¿ÃªÛ", "", "" },

156 { 
FLAG_EVEN_SOURCE_LEAK
, "Even Source Leak ¿ÃªÛ", "", "" },

158 { 
FLAG_FILE_NOT_FOUND
, "∆ƒ¿œ √£¿ª ºˆ æ¯¿Ω", "", "" },

159 { 
FLAG_FILE_CANNOT_OPEN
, "∆ƒ¿œ ø≠±‚ ¿ÃªÛ", "", "" },

160 { 
FLAG_FILE_UNPROPER_PARAMETER
, "∆ƒ¿œ ≥ªøÎ ¿ÃªÛ", "", "" },

161 { 
FLAG_FILE_CHECK_SUM
, "∆ƒ¿œ CheckSum ¿ÃªÛ", "", "" },

165 { 
INVALID_RETURN
, "InvalidÑeturn", "", "" },

166 { 
INVALID_INPUT
, "Invalid Input Parameter", "", "" },

168 { 
USER_ERR
, "ªÁøÎ¿⁄ ¿Øπﬂ ø°∑Ø", "", "" },

170 { 
RANGE_OVER
, "Range Over", "", "" },

171 { 
OL_REF_CURRENT_IS_OVER_INPUT_VOLT_N_RGST
, "º≥¡§ ¿¸∑˘ ∞™ ¿ÃªÛ", "", "" },

172 { 
OL_I_RANGE_OVER
, "√÷¥Î ¿¸∑˘ º≥¡§ π¸¿ß √ ∞˙", "", "" },

173 { 
OL_I_RANGE_UNDER
, "√÷º“ ¿¸∑˘ º≥¡§ π¸¿ß √ ∞˙", "", "" },

174 { 
CAL_CHECK_TEST_CONDITION
, "Calibration Test Condtion ∆ƒ¿œ º≥¡§ √º≈© « ø‰", "", "" },

175 { 
CAL_CHECK_HW
, "Calibration Hw Read ∞™ ¿ÃªÛ. H/W √º≈© « ø‰", "", "" },

177 { 
SW_LOGIC_ERR
, "SW ≥Ì∏Æ ø¿∑˘ ¿÷¿Ω. S/W√º≈© « ø‰", "", "" },

178 { 
SW_NO_INIT_VAR
, "√ ±‚»≠µ«¡ˆ æ ¿∫ ∫Øºˆ ªÁøÎ. S/W √º≈© « ø‰", "", "" },

179 { 
MAN_ERR_TEST_CONDEITION
, "ManulTest º≥¡§ ¡∂∞« ¿ÃªÛ", "", "" },

181 { 
OVERTIME
, "OverÅime", "", "" },

182 { 
OT_SETNCHK
, "Souce ¿¸æ–º≥¡§ ¿ÃªÛ", "", "" },

183 { 
OT_VB_OUTCHECK_ERR
, "VB OUT CHECK ERROR. OverTime", "", "" },

186 { 
DEVICE
, "Device", "", "" },

187 { 
MOTION
, "Motion", "", "" },

188 { 
DIO_INIT_ERR
, "DIO_INIT_ERR", "", "" },

189 { 
DIO_EXIT_ERR
, "DIO_EXIT_ERR", "", "" },

190 { 
INVALID_RETURN_DIOINPBIT
, "InvalidÑeturn from DioInpBit()", "", "" },

191 { 
INVALID_RETURN_DIOOUTBIT
, "InvalidÑeturn from DioOutBit()", "", "" },

192 { 
INVALID_RETURN_DIOINPBYTE
, "InvalidÑeturn from DioInpByte()", "", "" },

193 { 
INVALID_RETURN_DIOOUTBYTE
, "InvalidÑeturn from DioOutByte()", "", "" },

194 { 
INVALID_RETURN_DIOINP_MBIT
, "InvalidÑeturn from DioInpMultiBit()", "", "" },

195 { 
INVALID_RETURN_DIOOUT_MBIT
, "InvalidÑeturn from DioOutMultiBit()", "", "" },

199 
	#ERRMSG_TABLE_LEN
 (
EºMsgTabÀ
)/(EºMsgTabÀ[0])

	)

202 ˛as†
	cCEº‹


204 
	m¥iv©e
:

205 
m_îr‹_no
;

207 
	mpublic
:

208 
CSåög
 
m_°rSèã
;

210 
Së
(
îrcode
, 
CSåög
 
°rSèã
="");

211 
	$Gë
()

214  
m_îr‹_no
;

216 
	`Re£t
();

217 
BOOL
 
	`GëMsg
(
îr‹_no
, 
CSåög
 &
tôÀ
, CSåög &
°©e
, CSåög &
sﬁ
);

219 
public
:

220 
	`CEº‹
();

221 
vútuÆ
 ~
	`CEº‹
();

222 
	}
};

225 
CEº‹
 
ERR
;

227 
EºMsg
(
nMboxTy≥
=
MB_OK
, 
BOOL
 
bTø˚On
=
TRUE
);

	@Globals.h

5 #i‡!
deföed
(
AFX_GLOBALS_H__FDA16379_4221_4970_8471_B8FBD39D2C1E__INCLUDED_
)

6 
	#AFX_GLOBALS_H__FDA16379_4221_4970_8471_B8FBD39D2C1E__INCLUDED_


	)

8 #i‡
_MSC_VER
 > 1000

9 #¥agm®
⁄˚


12 
	~<dúe˘.h
>

13 
	~<io.h
>

14 
	~"°dafx.h
"

15 
	~<°d¨g.h
>

23 
	#FUNC
(
‚
Ë#‚

	)

28 ˛as†
	cCGlobÆs


30 
	mpublic
:

31 
CGlobÆs
();

32 
	mvútuÆ
 ~
CGlobÆs
();

43 
	ssFILE_DATA


45 
CSåög
 
	mSy°emDú
;

46 
CSåög
 
	mP¨amëîDú
;

47 
CSåög
 
	mD©aDú
;

50 
CSåög
 
	mACE400_4WD©aDú
;

52 
CSåög
 
	mSy°emFûeName
;

53 
CSåög
 
	mSy°emFûe
;

55 
sFILE_DATA
()

57 
	mSy°emFûeName
 = "System.";

59 
	mACE400_4WD©aDú
 = "D:\\log4w";

62 
Inô
()

65 
	mbuf„r
[
_MAX_PATH
];

66 if(
_gëcwd
–
buf„r
, 
_MAX_PATH
 ) =
NULL
)

68 
AfxMesßgeBox
("Root directoryÇot found.");

72 
	mSy°emDú
.
F‹m©
("%s", 
buf„r
);

74 
	mD©aDú
 = 
Sy°emDú
 + "\\" + "Data";

77 if–(
_ac˚ss
(
D©aDú
, 0 )) == -1 )

78 
_mkdú
(
D©aDú
);

80 
	mSy°emFûe
 = 
P¨amëîDú
 + "\\" + 
Sy°emFûeName
;

83 } 
	tsFILE_DATA
;

91 
	eUNIT
 { 
	m£c
=0, 
	mm£c
=1, 
	mu£c
=2, 
	mmA
, 
	muA
, 
	mMohm
, 
	mKohm
, 
	mohm
, 
	mmohm
, 
	muohm
 };

92 
	eUNIT_CONVERT_TYPE
 {

93 
	mMM_TO_UM
, 
	mUM_TO_MM
, 
	mSEC_TO_MSEC
, 
	mMSEC_TO_SEC


96 
	ePRT_TYPE
 { 
	mPRT_BASIC
,

97 
	mPRT_LEVEL1
,

98 
	mPRT_LEVEL2
,

99 
	mPRT_LEVEL3
,

100 
	mPRT_DEVICE
,

101 
	mPRT_DEV_D64
,

106 
WORD
 
g_wPrötSèã
;

107 
sFILE_DATA
 
g_sFûe
;

119 
DoEvíts
(
DWORD
 
dwMûli£c⁄ds
=0);

120 
Dñay
(
UINT
 
dñaytime
=0, UINT 
unô
=
u£c
);

121 
__öt64
 
GëMi¸oSec⁄d
();

122 
BOOL
 
FûeExi°s
(
CSåög
 
°rFûeP©h
);

123 
GëD©eAndTime
(*
d©ëime
);

124 
SIZE_T
 
GëPro˚ssW‹kögSëSize
();

125 
__PrötMemSize
(* 
°rFunc
, 
löe
);

126 
__PrötLöe
(* 
°rFûe
, 
löe
);

127 
	#__LINE_PRT__
 (
	`__PrötLöe
(
__FILE__
, 
__LINE__
));

	)

129 
AFX_CDECL
 
MyTø˚
(
PRT_TYPE
 
¥tTy≥
, 
LPCTSTR
 
ÕszF‹m©
, ...);

131 
p_tdi°
(
t
, 
df
);

	@ShortTestDialog.h

1 #i‡!
deföed
(
AFX_SHORT_TEST_DIALOG_H__2ECC17B6_A785_4CA6_B46A_85C1648A9469__INCLUDED_
)

2 
	#AFX_SHORT_TEST_DIALOG_H__2ECC17B6_A785_4CA6_B46A_85C1648A9469__INCLUDED_


	)

4 #i‡
_MSC_VER
 > 1000

5 #¥agm®
⁄˚


10 
	~"GlobÆs.h
"

11 
	~"Eº‹.h
"

14 
	#MAX_SQUARE_N
 100

	)

16 ˛as†
	cCPöLi°


19 
	mpublic
:

20 
waPö
[
MAX_SQUARE_N
];

21 
	mnPöC¡
;

24 
	mpublic
:

25 
	$CPöLi°
()

27 ::
	`FûlMem‹y
(
waPö
, (waPin), -1);

28 
nPöC¡
 = 0;

31 
	$öôMembî
()

33 ::
	`FûlMem‹y
(
waPö
, (waPin), -1);

34 
nPöC¡
 = 0;

35 
	}
}

38 
BOOL
 
	$isExi°
(
wPö
)

40 
i
 = 0; i < 
nPöC¡
; i++)

42 i‡(
waPö
[
i
] =
wPö
)

43  
TRUE
;

45  
FALSE
;

46 
	}
}

48 
BOOL
 
	$isEm±y
()

50 i‡(
nPöC¡
 == 0)

51  
TRUE
;

53 i‡(
waPö
[0] == -1)

54  
TRUE
;

56  
FALSE
;

57 
	}
}

60 
	$addPöLi°
(
wPö
)

62 i‡(
nPöC¡
 >
MAX_SQUARE_N
)

65 i‡(
	`isExi°
(
wPö
Ë=
TRUE
)

68 
waPö
[
nPöC¡
] = 
wPö
;

70 
nPöC¡
++;

73 
	}
}

75 
CSåög
 
	$gëSå_PöLi°
()

77 
CSåög
 
out
 = "";

78 
CSåög
 
°rTemp
 = "";

80 
i
 = 0; i < 
nPöC¡
; i++)

82 
°rTemp
.
	`F‹m©
–" %5d", 
waPö
[
i
]);

83 
out
 +
°rTemp
;

86  
out
;

87 
	}
}

95 ˛as†
	cCSh‹tTe°Dülog
 : 
public
 
CDülog


98 
public
:

99 
CSh‹tTe°Dülog
(
CWnd
* 
pP¨ít
 = 
NULL
);

103 íum { 
	mIDD
 = 
IDD_SHORT_TEST_DIALOG
 };

104 
CLi°Box
 
	gm_li°BadPö
;

105 
CEdô
 
	gm_edôSqu¨eMåx
;

106 
CEdô
 
	gm_edôMósOut
;

107 
	gm_edô_nSqu¨ePöNum
;

108 
	gm_edô_nSqu¨eN
;

109 
	gm_edô_nSh‹tVbI≈ut
;

110 
	gm_edô_nSh‹tVcI≈ut
;

111 
	gm_edô_nBadPöI≈ut
;

112 
BOOL
 
	gm_check_bLöór
;

113 
BOOL
 
	gm_check_bEx˛udeVc
;

120 
	g¥Ÿe˘ed
:

121 
vútuÆ
 
DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
);

125 
	g¥Ÿe˘ed
:

129 
vútuÆ
 
BOOL
 
OnInôDülog
();

130 
afx_msg
 
OnBuâ⁄I≈utSqu¨ePöNum
();

131 
afx_msg
 
OnBuâ⁄AddBadPö
();

132 
afx_msg
 
OnBuâ⁄Re£tBadPö
();

133 
afx_msg
 
OnBuâ⁄MósuªSh‹t
();

135 
	$DECLARE_MESSAGE_MAP
()

137 
public
:

142 
m_waSqu¨eM©rix
[
MAX_SQUARE_N
][MAX_SQUARE_N];

143 
CPöLi°
 
m_Bad
;

145 
CPöLi°
 
m_foundVbBad
;

146 
CPöLi°
 
m_foundVcBad
;

147 
CPöLi°
 
m_foundExåaVbBad
;

148 
BOOL
 
m_bFœg_Regi°VcBad
;

149 
BOOL
 
m_bFœg_Regi°VbBad
;

150 
BOOL
 
m_bFœgSQM©rxCh™ged
;

153 
m_waVbOn
[
MAX_SQUARE_N
];

154 
m_nVbCou¡
;

155 
m_waVcOn
[
MAX_SQUARE_N
];

156 
m_nVcCou¡
;

157 
m_nCheckSh‹t_Cou¡
;

164 
BOOL
 
	`InôMembî
();

167 
	`makeSqu¨e
();

168 
CSåög
 
	`¥ötSqu¨e
();

169 
	`¥ötSqu¨e_Tø˚
();

172 
	`DoCheck_YDú
(
CSåög
 &
rOut
);

173 
	`BSórch_VbCheck
(
CSåög
 &
rOut
, 
vbFú°
, 
vbLa°
, 
vcFú°
, 
vcLa°
, 
BOOL
 
bFú°CÆl

FALSE
);

174 
	`LSórch_VbCheck
(
CSåög
 &
rOut
, 
vbFú°
, 
vbLa°
, 
vcFú°
, 
vcLa°
);

175 
	`BSórch_VcCheck
(
CSåög
 &
rOut
, 
vbFú°
, 
vbLa°
, 
vcFú°
, 
vcLa°
, 
BOOL
 
bFú°CÆl

FALSE
);

176 
	`LSórch_VcCheck
(
CSåög
 &
rOut
, 
vbFú°
, 
vbLa°
, 
vcFú°
, 
vcLa°
);

177 
	`AddVbBad_PöLi°
(
wPö
);

178 
	`AddVcBad_PöLi°
(
wPö
);

181 
	`DoCheck_XDú
(
CSåög
 &
rOut
);

182 
	`CﬁumnLöeSórch
(
CSåög
& 
rOut
, 
vcCﬁ
);

185 
	`CheckSh‹t
(
vbFú°
, 
vbLa°
, 
vcFú°
, 
vcLa°
);

186 
	`VB_SwOn
(
wVbPö
);

187 
	`VC_SwOn
(
wVcPö
);

188 
	`VB_Re£t
();

189 
	`VC_Re£t
();

190 
CSåög
 
	`VB_Pröt
(
°¨t
, 
íd
);

191 
CSåög
 
	`VC_Pröt
(
°¨t
, 
íd
);

192 
	`VB_PrötTø˚
();

193 
	`VC_PrötTø˚
();

195 
	}
};

	@StdAfx.h

6 #i‡!
deföed
(
AFX_STDAFX_H__162EFA7F_2283_401E_A2DD_16AA1B7EE8C3__INCLUDED_
)

7 
	#AFX_STDAFX_H__162EFA7F_2283_401E_A2DD_16AA1B7EE8C3__INCLUDED_


	)

9 #i‡
_MSC_VER
 > 1000

10 #¥agm®
⁄˚


13 
	#VC_EXTRALEAN


14 

	)

15 
	~<afxwö.h
>

16 
	~<afxext.h
>

17 
	~<afxdi•.h
>

18 
	~<afxdt˘l.h
>

19 #i‚de‡
_AFX_NO_AFXCMN_SUPPORT


20 
	~<afxcmn.h
>

	@gridctrl_src/CellRange.h

5 #i‡!
deföed
(
AFX_CELLRANGE_H__F86EF761_725A_11D1_ABBA_00A0243D1382__INCLUDED_
)

6 
	#AFX_CELLRANGE_H__F86EF761_725A_11D1_ABBA_00A0243D1382__INCLUDED_


	)

8 #i‡
_MSC_VER
 >= 1000

9 #¥agm®
⁄˚


17 ˛as†
	cCCñlID


20 
	mpublic
:

21 
row
, 
	mcﬁ
;

24 
	mpublic
:

25 
CCñlID
(
nRow
 = -1, 
nCﬁ
 = -1Ë: 
row
“Row), 
	$cﬁ
(
nCﬁ
) {}

27 
	$IsVÆid
(Ëc⁄° {  (
row
 >0 && 
cﬁ
 >0); 
	}
}

28 
	g›î©‹
==(c⁄° 
CCñlID
& 
rhs
Ë{  (
row
 =rhs.row && 
cﬁ
 ==Ñhs.col); }

29 
	g›î©‹
!=(c⁄° 
CCñlID
& 
rhs
Ë{  !
›î©‹
==(rhs); }

32 ˛as†
	cCCñlR™ge


34 
	mpublic
:

36 
CCñlR™ge
(
nMöRow
 = -1, 
nMöCﬁ
 = -1, 
nMaxRow
 = -1, 
nMaxCﬁ
 = -1)

38 
Së
(
nMöRow
, 
nMöCﬁ
, 
nMaxRow
, 
nMaxCﬁ
);

41 
Së
(
nMöRow
 = -1, 
nMöCﬁ
 = -1, 
nMaxRow
 = -1, 
nMaxCﬁ
 = -1);

43 
	$IsVÆid
() const;

44 
	$InR™ge
(
row
, 
cﬁ
) const;

45 
	$InR™ge
(c⁄° 
CCñlID
& 
˚ŒID
) const;

46 
	$Cou¡
(Ë{  (
m_nMaxRow
 - 
m_nMöRow
 + 1Ë* (
m_nMaxCﬁ
 - 
m_nMöCﬁ
 + 1); 
	}
}

48 
CCñlID
 
	$GëT›Le·
() const;

49 
CCñlR™ge
 
	$I¡î£˘
(c⁄° 
CCñlR™ge
& 
rhs
) const;

51 
	$GëMöRow
(Ëc⁄° { 
m_nMöRow
;
	}
}

52 
	$SëMöRow
(
möRow
Ë{
m_nMöRow
 = möRow;
	}
}

54 
	$GëMöCﬁ
(Ëc⁄° { 
m_nMöCﬁ
;
	}
}

55 
	$SëMöCﬁ
(
möCﬁ
Ë{
m_nMöCﬁ
 = möCﬁ;
	}
}

57 
	$GëMaxRow
(Ëc⁄° { 
m_nMaxRow
;
	}
}

58 
	$SëMaxRow
(
maxRow
Ë{
m_nMaxRow
 = maxRow;
	}
}

60 
	$GëMaxCﬁ
(Ëc⁄° { 
m_nMaxCﬁ
;
	}
}

61 
	$SëMaxCﬁ
(
maxCﬁ
Ë{
m_nMaxCﬁ
 = maxCﬁ;
	}
}

63 
	$GëRowS∑n
(Ëc⁄° { 
m_nMaxRow
 - 
m_nMöRow
 + 1;
	}
}

64 
	$GëCﬁS∑n
(Ëc⁄° { 
m_nMaxCﬁ
 - 
m_nMöCﬁ
 + 1;
	}
}

66 
	g›î©‹
==(c⁄° 
CCñlR™ge
& 
rhs
);

67 
	g›î©‹
!=(c⁄° 
CCñlR™ge
& 
rhs
);

69 
	g¥Ÿe˘ed
:

70 
m_nMöRow
;

71 
	gm_nMöCﬁ
;

72 
	gm_nMaxRow
;

73 
	gm_nMaxCﬁ
;

76 
ölöe
 
	gCCñlR™ge
::
	$Së
(
möRow
, 
möCﬁ
, 
maxRow
, 
maxCﬁ
)

78 
m_nMöRow
 = 
möRow
;

79 
m_nMöCﬁ
 = 
möCﬁ
;

80 
m_nMaxRow
 = 
maxRow
;

81 
m_nMaxCﬁ
 = 
maxCﬁ
;

82 
	}
}

84 
ölöe
 
	gCCñlR™ge
::
›î©‹
==(c⁄° 
CCñlR™ge
& 
rhs
)

86  ((
m_nMöRow
 =
rhs
.m_nMöRowË&& (
m_nMöCﬁ
 ==Ñhs.m_nMinCol) &&

87 (
m_nMaxRow
 =
rhs
.m_nMaxRowË&& (
m_nMaxCﬁ
 ==Ñhs.m_nMaxCol));

90 
ölöe
 
	gCCñlR™ge
::
›î©‹
!=(c⁄° 
CCñlR™ge
& 
rhs
)

92  !
›î©‹
==(
rhs
);

95 
ölöe
 
	gCCñlR™ge
::
	$IsVÆid
() const

97  (
m_nMöRow
 >0 && 
m_nMöCﬁ
 >0 && 
m_nMaxRow
 >0 && 
m_nMaxCﬁ
 >= 0 &&

98 
m_nMöRow
 <
m_nMaxRow
 && 
m_nMöCﬁ
 <
m_nMaxCﬁ
);

99 
	}
}

101 
ölöe
 
	gCCñlR™ge
::
	$InR™ge
(
row
, 
cﬁ
) const

103  (
row
 >
m_nMöRow
 &&Ñow <
m_nMaxRow
 && 
cﬁ
 >
m_nMöCﬁ
 && cﬁ <
m_nMaxCﬁ
);

104 
	}
}

106 
ölöe
 
	gCCñlR™ge
::
	$InR™ge
(c⁄° 
CCñlID
& 
˚ŒID
) const

108  
	`InR™ge
(
˚ŒID
.
row
, cñlID.
cﬁ
);

109 
	}
}

111 
ölöe
 
CCñlID
 
	gCCñlR™ge
::
	$GëT›Le·
() const

113  
	`CCñlID
(
m_nMöRow
, 
m_nMöCﬁ
);

114 
	}
}

116 
ölöe
 
CCñlR™ge
 
	gCCñlR™ge
::
	$I¡î£˘
(c⁄° 
CCñlR™ge
& 
rhs
) const

118  
	`CCñlR™ge
(
	`max
(
m_nMöRow
,
rhs
.m_nMöRow), max(
m_nMöCﬁ
,rhs.m_nMinCol),

119 
	`mö
(
m_nMaxRow
,
rhs
.m_nMaxRow), mö(
m_nMaxCﬁ
,rhs.m_nMaxCol));

120 
	}
}

	@gridctrl_src/GridCtrl.h

1 #i‡!
deföed
(
AFX_GRIDCTRL_H__519FA702_722C_11D1_ABBA_00A0243D1382__INCLUDED_
)

2 
	#AFX_GRIDCTRL_H__519FA702_722C_11D1_ABBA_00A0243D1382__INCLUDED_


	)

4 #i‡
_MSC_VER
 >= 1000

5 #¥agm®
⁄˚


48 
	~"CñlR™ge.h
"

49 
	~<afxãm∂.h
>

51 #ifde‡
_WIN32_WCE


52 
	#GRIDCONTROL_NO_TITLETIPS


53 
	#GRIDCONTROL_NO_DRAGDROP


54 
	#GRIDCONTROL_NO_CLIPBOARD


55 
	#GRIDCONTROL_NO_PRINTING


56 

	)

57 #ifde‡
WCE_NO_PRINTING


58 
	#_WIN32_WCE_NO_PRINTING


	)

60 #ifde‡
WCE_NO_CURSOR


61 
	#_WIN32_WCE_NO_CURSOR


	)

66 #unde‡
TRY


67 #unde‡
CATCH


68 #unde‡
END_CATCH


69 
	#TRY
 
åy


	)

70 
	#CATCH
(
ex_˛ass
, 
ex_obje˘
Ë
	`ˇtch
”x_˛ass*Éx_obje˘)

	)

71 
	#END_CATCH


	)

74 #i‚de‡
GRIDCONTROL_NO_TITLETIPS


75 
	~"TôÀTù.h
"

78 #i‚de‡
GRIDCONTROL_NO_DRAGDROP


79 
	~"GridDr›T¨gë.h
"

80 #unde‡
GRIDCONTROL_NO_CLIPBOARD


83 #i‚de‡
GRIDCONTROL_NO_CLIPBOARD


84 
	~<afxﬁe.h
>

89 
	#GRIDCTRL_CLASSNAME
 
	`_T
("MFCGridCtrl")

90 
	#IDC_INPLACE_CONTROL
 8

91 

	)

92 
	#IsSHIFT¥es£d
(Ë–(
	`GëKeySèã
(
VK_SHIFT
Ë& (1 << ((
SHORT
)*8-1))Ë!0 )

	)

93 
	#IsCTRL¥es£d
(Ë–(
	`GëKeySèã
(
VK_CONTROL
Ë& (1 << ((
SHORT
)*8-1))Ë!0 )

	)

96 
	s_GV_ITEM
 {

97 
	mrow
,
	mcﬁ
;

98 
UINT
 
	mmask
;

99 
UINT
 
	m°©e
;

100 
UINT
 
	mnF‹m©
;

101 
CSåög
 
	mszText
;

102 
	miImage
;

103 
COLORREF
 
	m¸BkCÃ
;

104 
COLORREF
 
	m¸FgCÃ
;

105 
LPARAM
 
	mlP¨am
;

106 
LOGFONT
 
	mlfF⁄t
;

107 } 
	tGV_ITEM
;

110 
	#GVL_NONE
 0

	)

111 
	#GVL_HORZ
 1

	)

112 
	#GVL_VERT
 2

	)

113 
	#GVL_BOTH
 3

	)

116 
	#GVIF_TEXT
 
LVIF_TEXT


	)

117 
	#GVIF_IMAGE
 
LVIF_IMAGE


	)

118 
	#GVIF_PARAM
 
LVIF_PARAM


	)

119 
	#GVIF_STATE
 
LVIF_STATE


	)

120 
	#GVIF_BKCLR
 (
GVIF_STATE
<<1)

	)

121 
	#GVIF_FGCLR
 (
GVIF_STATE
<<2)

	)

122 
	#GVIF_FORMAT
 (
GVIF_STATE
<<3)

	)

123 
	#GVIF_FONT
 (
GVIF_STATE
<<4)

	)

126 
	#GVIS_FOCUSED
 0x0001

	)

127 
	#GVIS_SELECTED
 0x0002

	)

128 
	#GVIS_DROPHILITED
 0x0004

	)

129 
	#GVIS_READONLY
 0x0008

	)

130 
	#GVIS_FIXED
 0x0010

131 
	#GVIS_MODIFIED
 0x0020

	)

134 
	#GVNI_FOCUSED
 0x0001

	)

135 
	#GVNI_SELECTED
 0x0002

	)

136 
	#GVNI_DROPHILITED
 0x0004

	)

137 
	#GVNI_READONLY
 0x0008

	)

138 
	#GVNI_FIXED
 0x0010

139 
	#GVNI_MODIFIED
 0x0020

	)

141 
	#GVNI_ABOVE
 
LVNI_ABOVE


	)

142 
	#GVNI_BELOW
 
LVNI_BELOW


	)

143 
	#GVNI_TOLEFT
 
LVNI_TOLEFT


	)

144 
	#GVNI_TORIGHT
 
LVNI_TORIGHT


	)

145 
	#GVNI_ALL
 (
LVNI_BELOW
|
LVNI_TORIGHT
|
LVNI_TOLEFT
)

	)

146 
	#GVNI_AREA
 (
LVNI_BELOW
|
LVNI_TORIGHT
)

	)

149 
	#GVHT_DATA
 0x0000

	)

150 
	#GVHT_TOPLEFT
 0x0001

	)

151 
	#GVHT_COLHDR
 0x0002

	)

152 
	#GVHT_ROWHDR
 0x0004

	)

153 
	#GVHT_COLSIZER
 0x0008

	)

154 
	#GVHT_ROWSIZER
 0x0010

	)

155 
	#GVHT_LEFT
 0x0020

	)

156 
	#GVHT_RIGHT
 0x0040

	)

157 
	#GVHT_ABOVE
 0x0080

	)

158 
	#GVHT_BELOW
 0x0100

	)

160 
	sègNM_GRIDVIEW
 {

161 
NMHDR
 
	mhdr
;

162 
	miRow
;

163 
	miCﬁumn
;

164 } 
	tNM_GRIDVIEW
;

166 
	sègGV_DISPINFO
 {

167 
NMHDR
 
	mhdr
;

168 
GV_ITEM
 
	môem
;

169 } 
	tGV_DISPINFO
;

172 
	#GVN_BEGINDRAG
 
LVN_BEGINDRAG


173 
	#GVN_BEGINLABELEDIT
 
LVN_BEGINLABELEDIT


174 
	#GVN_BEGINRDRAG
 
LVN_BEGINRDRAG


	)

175 
	#GVN_COLUMNCLICK
 
LVN_COLUMNCLICK


	)

176 
	#GVN_DELETEITEM
 
LVN_DELETEITEM


	)

177 
	#GVN_ENDLABELEDIT
 
LVN_ENDLABELEDIT


178 
	#GVN_SELCHANGING
 
LVN_ITEMCHANGING


	)

179 
	#GVN_SELCHANGED
 
LVN_ITEMCHANGED


	)

187 ˛as†
	cCGridCñl
 : 
public
 
CObje˘


189 
public
:

190 
	$CGridCñl
()

192 
°©e
 = 0;

193 
nF‹m©
 = 0;

194 
szText
.
	`Em±y
();

195 
iImage
 = -1;

196 
¸BkCÃ
 = 
CLR_DEFAULT
;

197 
¸FgCÃ
 = 
CLR_DEFAULT
;

198 
lP¨am
 = 0;

201 
UINT
 
°©e
;

202 
UINT
 
nF‹m©
;

203 
CSåög
 
szText
;

204 
iImage
;

205 
COLORREF
 
¸BkCÃ
;

206 
COLORREF
 
¸FgCÃ
;

207 
LOGFONT
 
lfF⁄t
;

208 
LPARAM
 
lP¨am
;

209 
	}
};

213 
	gCTy≥dPåAºay
<
	tCObAºay
, 
	tCGridCñl
*> 
	tGRID_ROW
;

219 
˛ass
 
	gCGridCål
;

220 
AFXAPI
 
DDX_GridC⁄åﬁ
(
CD©aExch™ge
* 
pDX
, 
nIDC
, 
CGridCål
& 
rC⁄åﬁ
);

225 ˛as†
	cCGridCål
 : 
public
 
CWnd


227 
	$DECLARE_DYNCREATE
(
CGridCål
)

230 
public
:

231 
	`CGridCål
(
nRows
 = 0, 
nCﬁs
 = 0, 
nFixedRows
 = 0, 
nFixedCﬁs
 = 0);

233 
BOOL
 
	`Cª©e
(c⁄° 
RECT
& 
ª˘
, 
CWnd
* 
∑ª¡
, 
UINT
 
nID
,

234 
DWORD
 
dwStyÀ
 = 
WS_CHILD
 | 
WS_BORDER
 | 
WS_TABSTOP
 | 
WS_VISIBLE
);

235 
BOOL
 
	`Sub˛assWödow
(
HWND
 
hWnd
);

238 
public
:

239 
	$GëRowCou¡
(Ëc⁄° {  
m_nRows
; }

240 
	$GëCﬁumnCou¡
(Ëc⁄° {  
m_nCﬁs
; 
	}
}

241 
	$GëFixedRowCou¡
(Ëc⁄° {  
m_nFixedRows
; 
	}
}

242 
	$GëFixedCﬁumnCou¡
(Ëc⁄° {  
m_nFixedCﬁs
; 
	}
}

243 
BOOL
 
SëRowCou¡
(
nRows
 = 10);

244 
BOOL
 
SëCﬁumnCou¡
(
nCﬁs
 = 10);

245 
BOOL
 
SëFixedRowCou¡
(
nFixedRows
 = 1);

246 
BOOL
 
SëFixedCﬁumnCou¡
(
nFixedCﬁs
 = 1);

248 
	$GëRowHeight
(
nRow
) const;

249 
BOOL
 
	`SëRowHeight
(
row
, 
height
);

250 
	$GëCﬁumnWidth
(
nCﬁ
) const;

251 
BOOL
 
	`SëCﬁumnWidth
(
cﬁ
, 
width
);

253 
BOOL
 
	$GëCñlOrigö
(
nRow
, 
nCﬁ
, 
LPPOINT
 
p
) const;

254 
BOOL
 
	$GëCñlOrigö
(c⁄° 
CCñlID
& 
˚Œ
, 
LPPOINT
 
p
) const;

255 
BOOL
 
	$GëCñlRe˘
(
nRow
, 
nCﬁ
, 
LPRECT
 
pRe˘
) const;

256 
BOOL
 
	$GëCñlRe˘
(c⁄° 
CCñlID
& 
˚Œ
, 
LPRECT
 
pRe˘
) const;

258 
BOOL
 
	`GëTextRe˘
(c⁄° 
CCñlID
& 
˚Œ
, 
LPRECT
 
pRe˘
);

259 
BOOL
 
	`GëTextRe˘
(
nRow
, 
nCﬁ
, 
LPRECT
 
pRe˘
);

261 
	$GëFixedRowHeight
() const;

262 
	$GëFixedCﬁumnWidth
() const;

263 
	$GëVútuÆWidth
() const;

264 
	$GëVútuÆHeight
() const;

266 
	$SëTextCﬁ‹
(
COLORREF
 
˛r
Ë{ 
m_¸TextCﬁour
 = cÃ; 
	}
}

267 
COLORREF
 
	$GëTextCﬁ‹
(Ëc⁄° {  
m_¸TextCﬁour
; 
	}
}

268 
	$SëTextBkCﬁ‹
(
COLORREF
 
˛r
Ë{ 
m_¸TextBkCﬁour
 = cÃ; 
	}
}

269 
COLORREF
 
	$GëTextBkCﬁ‹
(Ëc⁄° {  
m_¸TextBkCﬁour
; 
	}
}

270 
	$SëBkCﬁ‹
(
COLORREF
 
˛r
Ë{ 
m_¸BkCﬁour
 = cÃ; 
	}
}

271 
COLORREF
 
	$GëBkCﬁ‹
(Ëc⁄° {  
m_¸BkCﬁour
; 
	}
}

272 
	$SëFixedTextCﬁ‹
(
COLORREF
 
˛r
Ë{ 
m_¸FixedTextCﬁour
 = cÃ; 
	}
}

273 
COLORREF
 
	$GëFixedTextCﬁ‹
(Ëc⁄° {  
m_¸FixedTextCﬁour
; 
	}
}

274 
	$SëFixedBkCﬁ‹
(
COLORREF
 
˛r
Ë{ 
m_¸FixedBkCﬁour
 = cÃ; 
	}
}

275 
COLORREF
 
	$GëFixedBkCﬁ‹
(Ëc⁄° {  
m_¸FixedBkCﬁour
; 
	}
}

276 
	$SëGridCﬁ‹
(
COLORREF
 
˛r
Ë{ 
m_¸GridCﬁour
 = cÃ; 
	}
}

277 
COLORREF
 
	$GëGridCﬁ‹
(Ëc⁄° {  
m_¸GridCﬁour
; 
	}
}

279 
	$GëSñe˘edCou¡
(Ëc⁄° {  
m_Sñe˘edCñlM≠
.
	`GëCou¡
(); 
	}
}

281 
CCñlID
 
	$GëFocusCñl
(Ëc⁄° {  
m_idCuºítCñl
; 
	}
}

283 
	$SëImageLi°
(
CImageLi°
* 
pLi°
Ë{ 
m_pImageLi°
 =ÖLi°; 
	}
}

284 
CImageLi°
* 
	$GëImageLi°
(Ëc⁄° {  
m_pImageLi°
; 
	}
}

286 
	$SëGridLöes
(
nWhichLöes
 = 
GVL_BOTH
Ë{ 
m_nGridLöes
 =ÇWhichLines;

287 i‡(::
	`IsWödow
(
	`GëSa„Hwnd
())Ë
	`InvÆid©e
(); 
	}
}

288 
	$GëGridLöes
(Ëc⁄° {  
m_nGridLöes
; 
	}
}

290 
	$SëEdôabÀ
(
BOOL
 
bEdôabÀ
 = 
TRUE
Ë{ 
m_bEdôabÀ
 = bEdôabÀ; 
	}
}

291 
BOOL
 
	$IsEdôabÀ
(Ëc⁄° {  
m_bEdôabÀ
; 
	}
}

292 
	$SëLi°Mode
(
BOOL
 
bE«bÀLi°Mode
 = 
TRUE
Ë{ 
m_bLi°Mode
 = bE«bÀLi°Mode; 
	}
}

293 
BOOL
 
	$GëLi°Mode
(Ëc⁄° {  
m_bLi°Mode
; 
	}
}

294 
	$SëSögÀRowSñe˘i⁄
(
BOOL
 
bSög
 = 
TRUE
Ë{ 
m_bSögÀRowSñe˘i⁄
 = bSög; 
	}
}

295 
BOOL
 
	$GëSögÀRowSñe˘i⁄
(Ë{  
m_bSögÀRowSñe˘i⁄
; 
	}
}

296 
	$E«bÀSñe˘i⁄
(
BOOL
 
bE«bÀ
 = 
TRUE
Ë{ 
	`Re£tSñe˘edR™ge
(); 
m_bE«bÀSñe˘i⁄
 = bE«bÀ; Re£tSñe˘edR™ge(); 
	}
}

297 
BOOL
 
	$IsSñe˘abÀ
(Ëc⁄° {  
m_bE«bÀSñe˘i⁄
; 
	}
}

298 
	$E«bÀDøgAndDr›
(
BOOL
 
bAŒow
 = 
TRUE
Ë{ 
m_bAŒowDøgAndDr›
 = bAŒow; 
	}
}

299 
BOOL
 
	$GëDøgAndDr›
(Ëc⁄° {  
m_bAŒowDøgAndDr›
; 
	}
}

300 
	$SëRowResize
(
BOOL
 
bResize
 = 
TRUE
Ë{ 
m_bAŒowRowResize
 = bResize; 
	}
}

301 
BOOL
 
	$GëRowResize
(Ëc⁄° {  
m_bAŒowRowResize
; 
	}
}

302 
	$SëCﬁumnResize
(
BOOL
 
bResize
 = 
TRUE
Ë{ 
m_bAŒowCﬁumnResize
 = bResize; 
	}
}

303 
BOOL
 
	$GëCﬁumnResize
(Ëc⁄° {  
m_bAŒowCﬁumnResize
; 
	}
}

304 
	$SëHódîS‹t
(
BOOL
 
bS‹tOnClick
 = 
TRUE
Ë{ 
m_bS‹tOnClick
 = bS‹tOnClick; 
	}
}

305 
BOOL
 
	$GëHódîS‹t
(Ëc⁄° {  
m_bS‹tOnClick
; 
	}
}

306 
	$SëH™dÀTabKey
(
BOOL
 
bH™dÀTab
 = 
TRUE
Ë{ 
m_bH™dÀTabKey
 = bH™dÀTab; 
	}
}

307 
BOOL
 
	$GëH™dÀTabKey
(Ëc⁄° {  
m_bH™dÀTabKey
; 
	}
}

308 
	$SëDoubÀBuf„rög
(
BOOL
 
bBuf„r
 = 
TRUE
Ë{ 
m_bDoubÀBuf„r
 = bBuf„r; 
	}
}

309 
BOOL
 
	$GëDoubÀBuf„rög
(Ëc⁄° {  
m_bDoubÀBuf„r
; 
	}
}

310 
	$E«bÀTôÀTùs
(
BOOL
 
bE«bÀ
 = 
TRUE
Ë{ 
m_bTôÀTùs
 = bE«bÀ; 
	}
}

311 
BOOL
 
	$GëTôÀTùs
(Ë{  
m_bTôÀTùs
; 
	}
}

313 
SëModifõd
(
BOOL
 
bModifõd
 = 
TRUE
, 
nRow
 = -1, 
nCﬁ
 = -1);

314 
BOOL
 
GëModifõd
(
nRow
 = -1, 
nCﬁ
 = -1);

315 
BOOL
 
IsCñlFixed
(
nRow
, 
nCﬁ
);

317 
BOOL
 
SëIãm
(c⁄° 
GV_ITEM
* 
pIãm
);

318 
BOOL
 
GëIãm
(
GV_ITEM
* 
pIãm
);

319 
BOOL
 
SëIãmText
(
nRow
, 
nCﬁ
, 
LPCTSTR
 
°r
);

320 
vútuÆ
 
CSåög
 
GëIãmText
(
nRow
, 
nCﬁ
);

321 
BOOL
 
SëIãmD©a
(
nRow
, 
nCﬁ
, 
LPARAM
 
lP¨am
);

322 
LPARAM
 
	$GëIãmD©a
(
nRow
, 
nCﬁ
) const;

323 
BOOL
 
	`SëIãmImage
(
nRow
, 
nCﬁ
, 
iImage
);

324 
	$GëIãmImage
(
nRow
, 
nCﬁ
) const;

325 
BOOL
 
	`SëIãmSèã
(
nRow
, 
nCﬁ
, 
UINT
 
°©e
);

326 
UINT
 
	$GëIãmSèã
(
nRow
, 
nCﬁ
) const;

327 
BOOL
 
	`SëIãmF‹m©
(
nRow
, 
nCﬁ
, 
UINT
 
nF‹m©
);

328 
UINT
 
	$GëIãmF‹m©
(
nRow
, 
nCﬁ
) const;

329 
BOOL
 
	`SëIãmBkCﬁour
(
nRow
, 
nCﬁ
, 
COLORREF
 
¸
 = 
CLR_DEFAULT
);

330 
COLORREF
 
	$GëIãmBkCﬁour
(
nRow
, 
nCﬁ
) const;

331 
BOOL
 
	`SëIãmFgCﬁour
(
nRow
, 
nCﬁ
, 
COLORREF
 
¸
 = 
CLR_DEFAULT
);

332 
COLORREF
 
	$GëIãmFgCﬁour
(
nRow
, 
nCﬁ
) const;

333 
BOOL
 
	`SëIãmF⁄t
(
nRow
, 
nCﬁ
, 
LOGFONT
* 
lf
);

334 
LOGFONT
* 
	`GëIãmF⁄t
(
nRow
, 
nCﬁ
);

337 
public
:

338 
	`In£πCﬁumn
(
LPCTSTR
 
°rHódög
, 
UINT
 
nF‹m©
 = 
DT_CENTER
|
DT_VCENTER
|
DT_SINGLELINE
,

339 
nCﬁumn
 = -1);

340 
	`In£πRow
(
LPCTSTR
 
°rHódög
, 
nRow
 = -1);

341 
BOOL
 
	`DñëeCﬁumn
(
nCﬁumn
);

342 
BOOL
 
	`DñëeRow
(
nRow
);

343 
BOOL
 
	`DñëeN⁄FixedRows
();

344 
BOOL
 
	`DñëeAŒIãms
();

346 
BOOL
 
	`AutoSizeRow
(
nRow
);

347 
BOOL
 
	`AutoSizeCﬁumn
(
nCﬁ
);

348 
	`AutoSizeRows
();

349 
	`AutoSizeCﬁumns
();

350 
	`AutoSize
();

351 
	`Ex∑ndCﬁumnsToFô
();

352 
	`Ex∑ndRowsToFô
();

353 
	`Ex∑ndToFô
();

355 
CSize
 
	`GëTextExã¡
(
LPCTSTR
 
°r
, 
BOOL
 
bU£Sñe˘edF⁄t
 = 
TRUE
);

356 
	$EnsuªVisibÀ
(
CCñlID
 &
˚Œ
Ë{ 
	`EnsuªVisibÀ
(˚Œ.
row
, cñl.
cﬁ
); 
	}
}

357 
EnsuªVisibÀ
(
nRow
, 
nCﬁ
);

358 
BOOL
 
	$IsCñlVisibÀ
(
nRow
, 
nCﬁ
) const;

359 
BOOL
 
	$IsCñlVisibÀ
(
CCñlID
 
˚Œ
) const;

360 
BOOL
 
	$IsCñlEdôabÀ
(
nRow
, 
nCﬁ
) const;

361 
BOOL
 
	$IsCñlEdôabÀ
(
CCñlID
 &
˚Œ
) const;

365 
	`SëRedøw
(
BOOL
 
bAŒowDøw
, BOOL 
bRe£tS¸ﬁlB¨s
 = 
FALSE
);

366 
BOOL
 
	`RedøwCñl
(
nRow
, 
nCﬁ
, 
CDC
* 
pDC
 = 
NULL
);

367 
BOOL
 
	`RedøwCñl
(c⁄° 
CCñlID
& 
˚Œ
, 
CDC
* 
pDC
 = 
NULL
);

368 
BOOL
 
	`RedøwRow
(
row
);

369 
BOOL
 
	`RedøwCﬁumn
(
cﬁ
);

371 #i‡!
	`deföed
(
_WIN32_WCE_NO_PRINTING
Ë&& !
	$deföed
(
GRIDCONTROL_NO_PRINTING
)

372 
	`Pröt
();

374 #i‚de‡
_WIN32_WCE


375 
BOOL
 
	`Save
(
LPCTSTR
 
fûíame
);

376 
BOOL
 
	`Lﬂd
(
LPCTSTR
 
fûíame
);

379 
CCñlR™ge
 
	$GëCñlR™ge
() const;

380 
CCñlR™ge
 
	$GëSñe˘edCñlR™ge
() const;

381 
	`SëSñe˘edR™ge
(c⁄° 
CCñlR™ge
& 
R™ge
, 
BOOL
 
bF‹˚Rïaöt
 = 
FALSE
);

382 
	`SëSñe˘edR™ge
(
nMöRow
, 
nMöCﬁ
, 
nMaxRow
, 
nMaxCﬁ
,

383 
BOOL
 
bF‹˚Rïaöt
 = 
FALSE
);

384 
BOOL
 
	$IsVÆid
(
nRow
, 
nCﬁ
) const;

385 
BOOL
 
	$IsVÆid
(c⁄° 
CCñlID
& 
˚Œ
) const;

386 
BOOL
 
	$IsVÆid
(c⁄° 
CCñlR™ge
& 
ønge
) const;

388 #i‚de‡
GRIDCONTROL_NO_CLIPBOARD


390 
vútuÆ
 
	`CutSñe˘edText
();

391 
vútuÆ
 
COÀD©aSour˚
* 
	`C›yTextFromGrid
();

392 
vútuÆ
 
BOOL
 
	`Pa°eTextToGrid
(
CCñlID
 
˚Œ
, 
COÀD©aObje˘
* 
pD©aObje˘
);

395 #i‚de‡
GRIDCONTROL_NO_DRAGDROP


396 
	`OnBegöDøg
();

397 
DROPEFFECT
 
	`OnDøgE¡î
(
COÀD©aObje˘
* 
pD©aObje˘
, 
DWORD
 
dwKeySèã
, 
CPoöt
 
poöt
);

398 
DROPEFFECT
 
	`OnDøgOvî
(
COÀD©aObje˘
* 
pD©aObje˘
, 
DWORD
 
dwKeySèã
, 
CPoöt
 
poöt
);

399 
	`OnDøgLóve
();

400 
BOOL
 
	`OnDr›
(
COÀD©aObje˘
* 
pD©aObje˘
, 
DROPEFFECT
 
dr›Ef„˘
, 
CPoöt
 
poöt
);

403 #i‚de‡
GRIDCONTROL_NO_CLIPBOARD


404 
vútuÆ
 
	`OnEdôCut
();

405 
vútuÆ
 
	`OnEdôC›y
();

406 
vútuÆ
 
	`OnEdôPa°e
();

408 
vútuÆ
 
	`OnEdôSñe˘AŒ
();

410 
CCñlID
 
	$GëNextIãm
(
CCñlID
& 
˚Œ
, 
nFœgs
) const;

412 
BOOL
 
	`S‹tTextIãms
(
nCﬁ
, BOOL 
bAs˚ndög
);

413 
BOOL
 
	`S‹tIãms
(
PFNLVCOMPARE
 
p‚Com∑ª
, 
nCﬁ
, BOOL 
bAs˚ndög
, 
LPARAM
 
d©a
 = 0);

418 
¥Ÿe˘ed
:

419 
vútuÆ
 
	`PªSub˛assWödow
();

421 #i‡!
	`deföed
(
_WIN32_WCE_NO_PRINTING
Ë&& !
	$deföed
(
GRIDCONTROL_NO_PRINTING
)

422 
public
:

423 
vútuÆ
 
	`OnBegöPrötög
(
CDC
 *
pDC
, 
CPrötInfo
 *
pInfo
);

424 
vútuÆ
 
	`OnPröt
(
CDC
 *
pDC
, 
CPrötInfo
 *
pInfo
);

425 
vútuÆ
 
	`OnEndPrötög
(
CDC
 *
pDC
, 
CPrötInfo
 *
pInfo
);

429 
public
:

430 
vútuÆ
 ~
	`CGridCål
();

432 
¥Ÿe˘ed
:

433 
BOOL
 
	`Regi°îWödowCœss
();

434 
LRESULT
 
	`SídMesßgeToP¨ít
(
nRow
, 
nCﬁ
, 
nMesßge
);

436 
BOOL
 
	`InvÆid©eCñlRe˘
(c⁄° 
CCñlID
& 
˚Œ
);

437 
BOOL
 
	`InvÆid©eCñlRe˘
(c⁄° 
CCñlR™ge
& 
˚ŒR™ge
);

438 
	`Eø£Bkgnd
(
CDC
* 
pDC
);

440 
BOOL
 
	$GëCñlR™geRe˘
(c⁄° 
CCñlR™ge
& 
˚ŒR™ge
, 
LPRECT
 
ÕRe˘
) const;

442 
CGridCñl
* 
	$GëCñl
(
nRow
, 
nCﬁ
) const;

443 
BOOL
 
	`SëCñl
(
nRow
, 
nCﬁ
, 
CGridCñl
* 
pCñl
);

445 
	$SëMou£Mode
(
nMode
Ë{ 
nOldMode
 = 
m_Mou£Mode
; m_Mou£ModênMode; ÇOldMode; 
	}
}

446 
	$GëMou£Mode
(Ëc⁄° {  
m_Mou£Mode
; 
	}
}

448 
BOOL
 
	$Mou£OvîRowResizeAªa
(
CPoöt
& 
poöt
) const;

449 
BOOL
 
	$Mou£OvîCﬁumnResizeAªa
(
CPoöt
& 
poöt
) const;

451 
CCñlID
 
	$GëCñlFromPt
(
CPoöt
 
poöt
, 
BOOL
 
bAŒowFixedCñlCheck
 = 
TRUE
) const;

452 
CCñlID
 
	$GëT›À·N⁄FixedCñl
() const;

453 
CCñlR™ge
 
	$GëUnob°ru˘edN⁄FixedCñlR™ge
() const;

454 
CCñlR™ge
 
	$GëVisibÀN⁄FixedCñlR™ge
(
LPRECT
 
pRe˘
 = 
NULL
) const;

456 
CCñlID
 
	`SëFocusCñl
(CCñlID 
˚Œ
);

457 
CCñlID
 
	`SëFocusCñl
(
nRow
, 
nCﬁ
);

459 
	`Re£tSñe˘edR™ge
();

460 
	`Re£tS¸ﬁlB¨s
();

461 
	`GëS¸ﬁlPos32
(
nB¨
, 
BOOL
 
bGëTøckPos
 = 
FALSE
);

462 
BOOL
 
	`SëS¸ﬁlPos32
(
nB¨
, 
nPos
, BOOL 
bRedøw
 = 
TRUE
);

464 
BOOL
 
	`S‹tTextIãms
(
nCﬁ
, BOOL 
bAs˚ndög
, 
low
, 
high
);

465 
BOOL
 
	`S‹tIãms
(
PFNLVCOMPARE
 
p‚Com∑ª
, 
nCﬁ
, BOOL 
bAs˚ndög
, 
LPARAM
 
d©a
,

466 
low
, 
high
);

469 
¥Ÿe˘ed
:

471 #i‡!
	`deföed
(
_WIN32_WCE_NO_PRINTING
Ë&& !
	$deföed
(
GRIDCONTROL_NO_PRINTING
)

472 
vútuÆ
 
	`PrötCﬁumnHódögs
(
CDC
 *
pDC
, 
CPrötInfo
 *
pInfo
);

473 
vútuÆ
 
	`PrötHódî
(
CDC
 *
pDC
, 
CPrötInfo
 *
pInfo
);

474 
vútuÆ
 
	`PrötFoŸî
(
CDC
 *
pDC
, 
CPrötInfo
 *
pInfo
);

477 #i‚de‡
GRIDCONTROL_NO_DRAGDROP


479 
vútuÆ
 
CImageLi°
* 
	`Cª©eDøgImage
(
CPoöt
 *
pHŸSpŸ
);

483 
vútuÆ
 
	`OnFixedCﬁumnClick
(
CCñlID
& 
˚Œ
);

484 
vútuÆ
 
	`OnFixedRowClick
(
CCñlID
& 
˚Œ
);

487 
vútuÆ
 
CSize
 
	`GëCñlExã¡
(
nRow
, 
nCﬁ
, 
CDC
* 
pDC
);

488 
vútuÆ
 
	`OnEndEdôCñl
(
nRow
, 
nCﬁ
, 
CSåög
 
°r
);

489 
vútuÆ
 
	`OnEdôCñl
(
nRow
, 
nCﬁ
, 
UINT
 
nCh¨
);

490 
vútuÆ
 
	`Cª©eInPœ˚EdôC⁄åﬁ
(
CRe˘
& 
ª˘
, 
DWORD
 
dwStyÀ
, 
UINT
 
nID
,

491 
nRow
, 
nCﬁ
,

492 
LPCTSTR
 
szText
, 
nCh¨
);

495 
vútuÆ
 
	`OnDøw
(
CDC
* 
pDC
);

496 
vútuÆ
 
BOOL
 
	`DøwFixedCñl
(
CDC
* 
pDC
, 
nRow
, 
nCﬁ
, 
CRe˘
 
ª˘
, BOOL 
bEø£Bk
=
FALSE
);

497 
vútuÆ
 
BOOL
 
	`DøwCñl
(
CDC
* 
pDC
, 
nRow
, 
nCﬁ
, 
CRe˘
 
ª˘
, BOOL 
bEø£Bk
=
FALSE
);

500 
vútuÆ
 
CGridCñl
* 
	`Cª©eCñl
(
nRow
, 
nCﬁ
);

501 
vútuÆ
 
	`Em±yCñl
(
CGridCñl
* 
pCñl
, 
nRow
, 
nCﬁ
);

504 
¥Ÿe˘ed
:

506 
COLORREF
 
m_¸TextCﬁour
, 
m_¸TextBkCﬁour
, 
m_¸BkCﬁour
,

507 
m_¸FixedTextCﬁour
, 
m_¸FixedBkCﬁour
, 
m_¸GridCﬁour
;

508 
COLORREF
 
m_¸WödowText
, 
m_¸WödowCﬁour
, 
m_¸3DFa˚
,

509 
m_¸Shadow
;

511 
m_nGridLöes
;

512 
BOOL
 
m_bEdôabÀ
;

513 
BOOL
 
m_bModifõd
;

514 
BOOL
 
m_bAŒowDøgAndDr›
;

515 
BOOL
 
m_bLi°Mode
;

516 
BOOL
 
m_bSögÀRowSñe˘i⁄
;

517 
BOOL
 
m_bAŒowDøw
;

518 
BOOL
 
m_bE«bÀSñe˘i⁄
;

519 
BOOL
 
m_bS‹tOnClick
;

520 
BOOL
 
m_bH™dÀTabKey
;

521 
BOOL
 
m_bDoubÀBuf„r
;

522 
BOOL
 
m_bTôÀTùs
;

525 
m_nRows
, 
m_nFixedRows
, 
m_nCﬁs
, 
m_nFixedCﬁs
;

526 
CUI¡Aºay
 
m_¨RowHeights
, 
m_¨CﬁWidths
;

527 
m_nM¨gö
;

528 
m_nDefCñlWidth
, 
m_nDefCñlHeight
;

529 
m_nVS¸ﬁlMax
, 
m_nHS¸ﬁlMax
;

532 
LOGFONT
 
m_Logf⁄t
;

533 
CF⁄t
 
m_PröãrF⁄t
,

534 
m_F⁄t
;

535 
CImageLi°
* 
m_pImageLi°
;

538 
CTy≥dPåAºay
<
CObAºay
, 
GRID_ROW
*> 
m_RowD©a
;

541 
m_Mou£Mode
;

542 
CPoöt
 
m_Le·ClickDownPoöt
, 
m_La°Mou£Poöt
;

543 
CCñlID
 
m_Le·ClickDownCñl
, 
m_Sñe˘i⁄SèπCñl
;

544 
CCñlID
 
m_idCuºítCñl
;

545 
m_nTimîID
;

546 
m_nTimîI¡îvÆ
;

547 
m_nResizeC≠tuªR™ge
;

548 
BOOL
 
m_bAŒowRowResize
, 
m_bAŒowCﬁumnResize
;

549 
m_nRowsPîWhìlNŸch
;

550 
CM≠
<
DWORD
,DWORD, 
CCñlID
, CCñlID&> 
m_Sñe˘edCñlM≠
, 
m_PªvSñe˘edCñlM≠
;

552 #i‚de‡
GRIDCONTROL_NO_TITLETIPS


553 
CTôÀTù
 
m_TôÀTù
;

557 
BOOL
 
m_bMu°UnöôOLE
;

558 
CCñlID
 
m_La°DøgOvîCñl
;

559 #i‚de‡
GRIDCONTROL_NO_DRAGDROP


560 
CGridDr›T¨gë
 
m_Dr›T¨gë
;

564 
CSize
 
m_Ch¨Size
;

565 
m_nPageHeight
;

566 
CSize
 
m_LogiˇlPageSize
,

567 
m_P≠îSize
;

570 
m_bAs˚ndög
;

571 
m_S‹tCﬁumn
;

573 
¥Ÿe˘ed
:

574 
	`Sñe˘AŒCñls
();

575 
	`Sñe˘Cﬁumns
(
CCñlID
 
cuºítCñl
);

576 
	`Sñe˘Rows
(
CCñlID
 
cuºítCñl
);

577 
	`Sñe˘Cñls
(
CCñlID
 
cuºítCñl
);

578 
	`OnSñe˘ög
(c⁄° 
CCñlID
& 
cuºítCñl
);

582 
afx_msg
 
	`OnPaöt
();

583 
afx_msg
 
	`OnHS¸ﬁl
(
UINT
 
nSBCode
, UINT 
nPos
, 
CS¸ﬁlB¨
* 
pS¸ﬁlB¨
);

584 
afx_msg
 
	`OnVS¸ﬁl
(
UINT
 
nSBCode
, UINT 
nPos
, 
CS¸ﬁlB¨
* 
pS¸ﬁlB¨
);

585 
afx_msg
 
	`OnSize
(
UINT
 
nTy≥
, 
cx
, 
cy
);

586 
afx_msg
 
	`OnLBuâ⁄Up
(
UINT
 
nFœgs
, 
CPoöt
 
poöt
);

587 
afx_msg
 
	`OnLBuâ⁄Down
(
UINT
 
nFœgs
, 
CPoöt
 
poöt
);

588 
afx_msg
 
	`OnMou£Move
(
UINT
 
nFœgs
, 
CPoöt
 
poöt
);

589 
afx_msg
 
	`OnTimî
(
UINT
 
nIDEvít
);

590 
afx_msg
 
UINT
 
	`OnGëDlgCode
();

591 
afx_msg
 
	`OnKeyDown
(
UINT
 
nCh¨
, UINT 
nRïC¡
, UINT 
nFœgs
);

592 
afx_msg
 
	`OnCh¨
(
UINT
 
nCh¨
, UINT 
nRïC¡
, UINT 
nFœgs
);

593 
afx_msg
 
	`OnLBuâ⁄DblClk
(
UINT
 
nFœgs
, 
CPoöt
 
poöt
);

594 
afx_msg
 
BOOL
 
	`OnEø£Bkgnd
(
CDC
* 
pDC
);

595 
afx_msg
 
BOOL
 
	`OnSëCurs‹
(
CWnd
* 
pWnd
, 
UINT
 
nHôTe°
, UINT 
mesßge
);

596 
afx_msg
 
	`OnSysCﬁ‹Ch™ge
();

597 
afx_msg
 
	`OnC≠tuªCh™ged
(
CWnd
 *
pWnd
);

598 
afx_msg
 
	`OnUpd©eEdôC›y
(
CCmdUI
* 
pCmdUI
);

599 
afx_msg
 
	`OnUpd©eEdôCut
(
CCmdUI
* 
pCmdUI
);

600 
afx_msg
 
	`OnUpd©eEdôPa°e
(
CCmdUI
* 
pCmdUI
);

601 
afx_msg
 
	`OnUpd©eEdôSñe˘AŒ
(
CCmdUI
* 
pCmdUI
);

603 #i‡(
_MFC_VER
 >0x0421Ë|| (
_WIN32_WCE
 >= 210)

604 
afx_msg
 
	`OnSëtögCh™ge
(
UINT
 
uFœgs
, 
LPCTSTR
 
ÕszSe˘i⁄
);

606 #i‡!
	`deföed
(
_WIN32_WCE
Ë&& (
_MFC_VER
 >= 0x0421)

607 
afx_msg
 
BOOL
 
	`OnMou£Whìl
(
UINT
 
nFœgs
, 
zDñè
, 
CPoöt
 
±
);

609 
afx_msg
 
LRESULT
 
	`OnSëF⁄t
(
WPARAM
 
hF⁄t
, 
LPARAM
 
lP¨am
);

610 
afx_msg
 
LRESULT
 
	`OnGëF⁄t
(
WPARAM
 
hF⁄t
, 
LPARAM
 
lP¨am
);

611 
afx_msg
 
	`OnEndInPœ˚Edô
(
NMHDR
* 
pNMHDR
, 
LRESULT
* 
pResu…
);

612 
	$DECLARE_MESSAGE_MAP
()

614 
	eeMou£Modes
 { 
MOUSE_NOTHING
, 
MOUSE_SELECT_ALL
, 
MOUSE_SELECT_COL
, 
MOUSE_SELECT_ROW
,

615 
MOUSE_SELECT_CELLS
, 
MOUSE_SCROLLING_CELLS
,

616 
MOUSE_OVER_ROW_DIVIDE
, 
MOUSE_SIZING_ROW
,

617 
MOUSE_OVER_COL_DIVIDE
, 
MOUSE_SIZING_COL
,

618 
MOUSE_PREPARE_EDIT
,

619 #i‚de‡
GRIDCONTROL_NO_DRAGDROP


620 
MOUSE_PREPARE_DRAG
, 
MOUSE_DRAGGING


622 
	}
};

625 
ölöe
 
CGridCñl
* 
	gCGridCål
::
	$GëCñl
(
nRow
, 
nCﬁ
) const

627 i‡(
nRow
 < 0 ||ÇRow >
m_nRows
 || 
nCﬁ
 < 0 ||ÇCﬁ >
m_nCﬁs
Ë 
NULL
;

629 
GRID_ROW
* 
pRow
 = 
m_RowD©a
[
nRow
];

630 i‡(!
pRow
Ë 
NULL
;

631  
pRow
->
	`GëAt
(
nCﬁ
);

632 
	}
}

634 
ölöe
 
BOOL
 
	gCGridCål
::
	$SëCñl
(
nRow
, 
nCﬁ
, 
CGridCñl
* 
pCñl
)

636 i‡(
nRow
 < 0 ||ÇRow >
m_nRows
 || 
nCﬁ
 < 0 ||ÇCﬁ >
m_nCﬁs
Ë 
FALSE
;

638 
GRID_ROW
* 
pRow
 = 
m_RowD©a
[
nRow
];

639 i‡(!
pRow
Ë 
FALSE
;

641 
pRow
->
	`SëAt
(
nCﬁ
, 
pCñl
);

642  
TRUE
;

643 
	}
}

	@gridctrl_src/GridDropTarget.h

1 #i‡!
deföed
(
AFX_GRIDDROPTARGET_H__5C610981_BD36_11D1_97CD_00A0243D1382__INCLUDED_
)

2 
	#AFX_GRIDDROPTARGET_H__5C610981_BD36_11D1_97CD_00A0243D1382__INCLUDED_


	)

4 #i‡
_MSC_VER
 >= 1000

5 #¥agm®
⁄˚


15 
	~<afxﬁe.h
>

17 
˛ass
 
	gCGridCål
;

22 ˛as†
	cCGridDr›T¨gë
 : 
public
 
COÀDr›T¨gë


24 
public
:

25 
CGridDr›T¨gë
();

26 
	mvútuÆ
 ~
CGridDr›T¨gë
();

29 
	mpublic
:

30 
CGridCål
* 
m_pGridCål
;

31 
BOOL
 
	mm_bRegi°îed
;

34 
	mpublic
:

35 
BOOL
 
Regi°î
(
CGridCål
 *
pGridCål
);

36 
vútuÆ
 
Revoke
();

38 
BOOL
 
OnDr›
(
CWnd
* 
pWnd
, 
COÀD©aObje˘
* 
pD©aObje˘
, 
DROPEFFECT
 
dr›Ef„˘
, 
CPoöt
 
poöt
);

39 
DROPEFFECT
 
OnDøgE¡î
(
CWnd
* 
pWnd
, 
COÀD©aObje˘
* 
pD©aObje˘
, 
DWORD
 
dwKeySèã
, 
CPoöt
 
poöt
);

40 
OnDøgLóve
(
CWnd
* 
pWnd
);

41 
DROPEFFECT
 
OnDøgOvî
(
CWnd
* 
pWnd
, 
COÀD©aObje˘
* 
pD©aObje˘
, 
DWORD
 
dwKeySèã
, 
CPoöt
 
poöt
);

42 
DROPEFFECT
 
OnDøgS¸ﬁl
(
CWnd
* 
pWnd
, 
DWORD
 
dwKeySèã
, 
CPoöt
 
poöt
);

50 
	m¥Ÿe˘ed
:

56 
DECLARE_MESSAGE_MAP
()

	@gridctrl_src/InPlaceEdit.h

1 #i‡!
deföed
(
AFX_INPLACEEDIT_H__ECD42821_16DF_11D1_992F_895E185F9C72__INCLUDED_
)

2 
	#AFX_INPLACEEDIT_H__ECD42821_16DF_11D1_992F_895E185F9C72__INCLUDED_


	)

4 #i‡
_MSC_VER
 >= 1000

5 #¥agm®
⁄˚


40 ˛as†
	cCInPœ˚Edô
 : 
public
 
CEdô


43 
public
:

44 
CInPœ˚Edô
(
CWnd
* 
pP¨ít
, 
CRe˘
& 
ª˘
, 
DWORD
 
dwStyÀ
, 
UINT
 
nID
,

45 
nRow
, 
nCﬁumn
, 
CSåög
 
sInôText
, 
UINT
 
nFú°Ch¨
);

48 
	mpublic
:

51 
public
:

52 
EndEdô
();

57 
	mpublic
:

58 
vútuÆ
 
BOOL
 
PªTøn¶©eMesßge
(
MSG
* 
pMsg
);

59 
	m¥Ÿe˘ed
:

60 
vútuÆ
 
Po°NcDe°roy
();

64 
	mpublic
:

65 
vútuÆ
 ~
CInPœ˚Edô
();

68 
	m¥Ÿe˘ed
:

70 
afx_msg
 
OnKûlFocus
(
CWnd
* 
pNewWnd
);

71 
afx_msg
 
OnCh¨
(
UINT
 
nCh¨
, UINT 
nRïC¡
, UINT 
nFœgs
);

72 
afx_msg
 
OnKeyDown
(
UINT
 
nCh¨
, UINT 
nRïC¡
, UINT 
nFœgs
);

73 
afx_msg
 
UINT
 
OnGëDlgCode
();

75 
	$DECLARE_MESSAGE_MAP
()

77 
¥iv©e
:

78 
m_nRow
;

79 
m_nCﬁumn
;

80 
CSåög
 
m_sInôText
;

81 
UINT
 
m_nLa°Ch¨
;

82 
BOOL
 
m_bExôOnAºows
;

83 
CRe˘
 
m_Re˘
;

	@gridctrl_src/InPlaceList.h

1 #i‡!
deföed
(
AFX_INPLACELIST_H__ECD42822_16DF_11D1_992F_895E185F9C72__INCLUDED_
)

2 
	#AFX_INPLACELIST_H__ECD42822_16DF_11D1_992F_895E185F9C72__INCLUDED_


	)

4 #i‡
_MSC_VER
 >= 1000

5 #¥agm®
⁄˚


37 
	#IDC_COMBOEDIT
 1001

	)

42 ˛as†
	cCComboEdô
 : 
public
 
CEdô


45 
public
:

46 
CComboEdô
();

49 
	mpublic
:

52 
public
:

57 
vútuÆ
 
BOOL
 
PªTøn¶©eMesßge
(
MSG
* 
pMsg
);

61 
	mpublic
:

62 
vútuÆ
 ~
CComboEdô
();

65 
	m¥Ÿe˘ed
:

67 
afx_msg
 
OnKûlFocus
(
CWnd
* 
pNewWnd
);

68 
afx_msg
 
OnKeyDown
(
UINT
 
nCh¨
, UINT 
nRïC¡
, UINT 
nFœgs
);

69 
afx_msg
 
OnKeyUp
(
UINT
 
nCh¨
, UINT 
nRïC¡
, UINT 
nFœgs
);

72 
DECLARE_MESSAGE_MAP
()

78 ˛as†
	cCInPœ˚Li°
 : 
public
 
CComboBox


80 
‰õnd
 
˛ass
 
CComboEdô
;

83 
	mpublic
:

84 
CInPœ˚Li°
(
CWnd
* 
pP¨ít
,

85 
CRe˘
& 
ª˘
,

86 
DWORD
 
dwStyÀ
,

87 
UINT
 
nID
,

88 
nRow
, 
nCﬁumn
,

89 
CSåögAºay
& 
Iãms
,

90 
CSåög
 
sInôText
,

91 
UINT
 
nFú°Ch¨
);

94 
	mpublic
:

95 
CComboEdô
 
m_edô
;

98 
	mpublic
:

103 
¥Ÿe˘ed
:

104 
vútuÆ
 
Po°NcDe°roy
();

108 
	mpublic
:

109 
vútuÆ
 ~
CInPœ˚Li°
();

110 
	m¥Ÿe˘ed
:

111 
EndEdô
();

114 
	m¥Ÿe˘ed
:

116 
afx_msg
 
OnKûlFocus
(
CWnd
* 
pNewWnd
);

117 
afx_msg
 
OnKeyDown
(
UINT
 
nCh¨
, UINT 
nRïC¡
, UINT 
nFœgs
);

118 
afx_msg
 
OnKeyUp
(
UINT
 
nCh¨
, UINT 
nRïC¡
, UINT 
nFœgs
);

121 
	$DECLARE_MESSAGE_MAP
()

123 
¥iv©e
:

124 
m_nNumLöes
;

125 
CSåög
 
m_sInôText
;

126 
m_nRow
;

127 
m_nCﬁ
;

128 
UINT
 
m_nLa°Ch¨
;

129 
BOOL
 
m_bExôOnAºows
;

	@gridctrl_src/MemDC.h

1 #i‡!
deföed
(
AFX_MEMDC_H__CA1D3541_7235_11D1_ABBA_00A0243D1382__INCLUDED_
)

2 
	#AFX_MEMDC_H__CA1D3541_7235_11D1_ABBA_00A0243D1382__INCLUDED_


	)

4 #i‡
_MSC_VER
 >= 1000

5 #¥agm®
⁄˚


26 ˛as†
	cCMemDC
 : 
public
 
CDC


28 
public
:

31 
	$CMemDC
(
CDC
* 
pDC
Ë: 
	$CDC
()

33 
	`ASSERT
(
pDC
 !
NULL
);

35 
m_pDC
 = 
pDC
;

36 
m_pOldBôm≠
 = 
NULL
;

37 #i‚de‡
WCE_NO_PRINTING


38 
m_bMemDC
 = !
pDC
->
	`IsPrötög
();

40 
m_bMemDC
 = 
FALSE
;

43 i‡(
m_bMemDC
)

45 
pDC
->
	`GëClùBox
(&
m_ª˘
);

46 
	`Cª©eCom∑tibÀDC
(
pDC
);

47 
m_bôm≠
.
	`Cª©eCom∑tibÀBôm≠
(
pDC
, 
m_ª˘
.
	`Width
(), m_ª˘.
	`Height
());

48 
m_pOldBôm≠
 = 
	`Sñe˘Obje˘
(&
m_bôm≠
);

49 #i‚de‡
_WIN32_WCE


50 
	`SëWödowOrg
(
m_ª˘
.
À·
, m_ª˘.
t›
);

55 #i‚de‡
WCE_NO_PRINTING


56 
m_bPrötög
 = 
pDC
->m_bPrinting;

58 
m_hDC
 = 
pDC
->m_hDC;

59 
m_hAâribDC
 = 
pDC
->m_hAttribDC;

64 ~
	$CMemDC
()

66 i‡(
m_bMemDC
)

69 
m_pDC
->
	`BôB…
(
m_ª˘
.
À·
, m_ª˘.
t›
, m_ª˘.
	`Width
(), m_ª˘.
	`Height
(),

70 
this
, 
m_ª˘
.
À·
, m_ª˘.
t›
, 
SRCCOPY
);

73 
	`Sñe˘Obje˘
(
m_pOldBôm≠
);

78 
m_hDC
 = 
m_hAâribDC
 = 
NULL
;

80 
	}
}

83 
CMemDC
* 
	g›î©‹
->(Ë{ 
	gthis
;}

86 
›î©‹
 
	gCMemDC
*(Ë{ 
	gthis
;}

88 
	g¥iv©e
:

89 
CBôm≠
 
m_bôm≠
;

90 
CBôm≠
* 
	gm_pOldBôm≠
;

91 
CDC
* 
	gm_pDC
;

92 
CRe˘
 
	gm_ª˘
;

93 
BOOL
 
	gm_bMemDC
;

	@gridctrl_src/TitleTip.h

1 #i‡!
deföed
(
AFX_TITLETIP_H__C7165DA1_187F_11D1_992F_895E185F9C72__INCLUDED_
)

2 
	#AFX_TITLETIP_H__C7165DA1_187F_11D1_992F_895E185F9C72__INCLUDED_


	)

4 #i‡
_MSC_VER
 >= 1000

5 #¥agm®
⁄˚


10 
	#TITLETIP_CLASSNAME
 
	`_T
("ZTôÀTù")

	)

15 ˛as†
	cCTôÀTù
 : 
public
 
CWnd


18 
public
:

19 
CTôÀTù
();

20 
	mvútuÆ
 ~
CTôÀTù
();

21 
vútuÆ
 
BOOL
 
Cª©e
–
CWnd
 *
pP¨ítWnd
);

24 
	mpublic
:

27 
public
:

28 
Show
(
CRe˘
 
ª˘TôÀ
, 
LPCTSTR
 
ÕszTôÀText
,

29 
xoff£t
 = 0, 
LPRECT
 
ÕHovîRe˘
 = 
NULL
, 
LPLOGFONT
 
ÕLogF⁄t
 = NULL);

30 
Hide
();

35 
	mpublic
:

36 
vútuÆ
 
BOOL
 
PªTøn¶©eMesßge
(
MSG
* 
pMsg
);

40 
	mpublic
:

42 
¥Ÿe˘ed
:

43 
CWnd
 *
m_pP¨ítWnd
;

44 
CRe˘
 
	mm_ª˘TôÀ
;

45 
CRe˘
 
	mm_ª˘Hovî
;

48 
	m¥Ÿe˘ed
:

50 
afx_msg
 
OnMou£Move
(
UINT
 
nFœgs
, 
CPoöt
 
poöt
);

52 
DECLARE_MESSAGE_MAP
()

	@resource.h

5 
	#IDM_ABOUTBOX
 0x0010

	)

6 
	#IDD_ABOUTBOX
 100

	)

7 
	#IDS_ABOUTBOX
 101

	)

8 
	#IDD_MAIN_DIALOG
 102

	)

9 
	#IDR_MAINFRAME
 128

	)

10 
	#IDD_SHORT_TEST_DIALOG
 129

	)

11 
	#IDD_CONFIG_DIALOG
 130

	)

12 
	#IDC_BUTTON_SHORT_TEST
 1000

	)

13 
	#IDC_BUTTON_CONFIG
 1001

	)

14 
	#IDC_EDIT_SQUARE_PIN_NUM
 1001

	)

15 
	#IDC_BUTTON_INPUT_SQUARE_PIN_NUM
 1002

	)

16 
	#IDC_EDIT_SQUARE_N
 1003

	)

17 
	#IDC_EDIT_BAD_PIN
 1004

	)

18 
	#IDC_BUTTON_ADD_BAD_PIN
 1006

	)

19 
	#IDC_LIST_BAD_PIN
 1007

	)

20 
	#IDC_BUTTON_RESET_BAD_PIN
 1008

	)

21 
	#IDC_EDIT_SQUARE_MATRIX
 1009

	)

22 
	#IDC_EDIT_MEAS_OUTPUT
 1010

	)

23 
	#IDC_BUTTON_MEASURE
 1011

	)

24 
	#IDC_CHECK1
 1012

	)

25 
	#IDC_CHECK_EXCLUDE_VC
 1013

	)

26 
	#IDC_CHECK_PRT_BASIC
 1085

	)

27 
	#IDC_CHECK_PRT_LEVEL1
 1086

	)

28 
	#IDC_CHECK_PRT_Levñ2
 1087

	)

29 
	#IDC_CHECK_PRT_LEVEL3
 1088

	)

30 
	#IDC_CHECK_PRT_DEVICE
 1089

	)

31 
	#IDC_CHECK_PRT_DEV_D64
 1090

	)

32 
	#IDC_STATIC_PRINT_STATE
 1091

	)

33 
	#IDC_STATIC_USED_MEM
 1092

	)

37 #ifde‡
APSTUDIO_INVOKED


38 #i‚de‡
APSTUDIO_READONLY_SYMBOLS


39 
	#_APS_NEXT_RESOURCE_VALUE
 131

	)

40 
	#_APS_NEXT_COMMAND_VALUE
 32771

	)

41 
	#_APS_NEXT_CONTROL_VALUE
 1014

	)

42 
	#_APS_NEXT_SYMED_VALUE
 101

	)

	@stdafx.h

6 #i‡!
deföed
(
AFX_STDAFX_H__162EFA7F_2283_401E_A2DD_16AA1B7EE8C3__INCLUDED_
)

7 
	#AFX_STDAFX_H__162EFA7F_2283_401E_A2DD_16AA1B7EE8C3__INCLUDED_


	)

9 #i‡
_MSC_VER
 > 1000

10 #¥agm®
⁄˚


13 
	#VC_EXTRALEAN


14 

	)

15 
	~<afxwö.h
>

16 
	~<afxext.h
>

17 
	~<afxdi•.h
>

18 
	~<afxdt˘l.h
>

19 #i‚de‡
_AFX_NO_AFXCMN_SUPPORT


20 
	~<afxcmn.h
>

	@
1
.
0
16
293
ACE400MainDlg.h
ACE400_ShortTest.h
ConfigDialog.h
Error.h
Globals.h
ShortTestDialog.h
StdAfx.h
gridctrl_src/CellRange.h
gridctrl_src/GridCtrl.h
gridctrl_src/GridDropTarget.h
gridctrl_src/InPlaceEdit.h
gridctrl_src/InPlaceList.h
gridctrl_src/MemDC.h
gridctrl_src/TitleTip.h
resource.h
stdafx.h
